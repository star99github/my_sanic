# Nginx配置文件说明

# 配置文件默认路径：/nginx_xxx/conf/nginx.conf
# 配置文件结构：以块为结构基础，每个块由一对{}包裹，主要块有以下几类：
#   main: 全局块，有且仅有一个main块
#   events: 事件驱动模块与网络配置
#   http: 请求处理模块，有且仅有一个http块
#   server:  虚拟主机块，可有多个
#   location:  访问路由块，可有多个
#   upstream:  服务集群块，可有多个

# 常见配置项
# $remote_addr 与 $http_x_forwarded_for：记录客户端的IP地址
# $remote_user: 客户端用户名称
# $time_local: 访问时间与时区
# $request: 请求的url与协议
# $status: 请求状态
# $body_bytes_send: 发送给客户端的文件主体内容大小
# $http_refer: 记录访问来源地址
# $http_user_agent: 记录客户端浏览器相关信息



# Nginx配置文件示例

{
# main 全局块：核心模块
user nginx;  # 指定启动nginx进程的系统用户
work_processes auto;  # 指定nginx工作进程的数量，建议与CPU内核数一致，一般8个即达到性能上限，auto表示自动匹配CPU内核数
pid /path/nginx/nginx.pid;  # 指定nginx进程文件路径
error /path/nginx/error.log;  # nginx服务错误日志记录文件路径，



events {
    # events 事件驱动模块，网络相关配置
    worker_connections 12345;  # 指定每个工作者进程的最大连接数量，默认为1024，最多为65535
    use epoll;  # 指定事件驱动模型，有：epoll、select、
}

http {
    # http: 内核模块

    include /etc/nginx/mime.type;  # 浏览器中默认可解析的格式
    include /etc/nginx/conf.d/*.conf;  # 引入其它配置文件
    default_type application/octet-stream;  # 
    log_format my_format "";  # 日志记录格式
    access_log /path/nginx/log/access.log my_format;  # 访问日志记录文件路径和格式

    sendfile on;  # 开启零拷贝(高效文件传输)
    keepalive_timeout 100;  #长连接超时时间
    sendfile_max_chunk 100k;  # 每个进程每次调用传输数量值，默认为0，即不设上限


    underscores_in_headers on;  # 允许处理带有下划线的请求头，存在一定的安全风险。nginx默认会忽略带有下划线的请求头，导致后台无法获取到


    upstream backend {
        # 服务器地址列表，用于负载均衡
        # 负载均衡策略有：Round:轮询，默认；ip_hash: 根据IP哈希； hash $request_url: 根据url进行has衡；least_conn: 最小连接负载均衡
        server 192.168.123.25:8001 weight 1 fail_timeout 30;  # 指定赋值均衡策略为权重，权重比为1:2:3; fail_timeout:指定失败重试超时时间为30s，默认10
        server 192.168.123.35:8002 weight 2 max_fails 3;  # max_fails:最大失败次数，默认为1
        server 192.168.123:45:8003 weight 3 down backup;  # down：下线的服务；backup：备用机，仅在其它服务器无法访问时生效
        keepalive 32;  # 保持的连接数
    }

    upstream sites {
        ip_hash;  # 指定负载均衡策略为 ip_hash
        server abc.def.com;
        server blog.starword.com;
        server company.site.com;
    }


    upstream statics {
        ROUND;  # 指定负载均衡策略为 ROUND
        server static.html.com;
        server static.file.com;
        server static.image.com;
    }

    server {
        # 虚拟主机模块

        listen 8001;  # 监听端口号
        server_name IP/DN;  # 服务的域名或IP地址
        access_log /path/nginx/access.log;  # 当前网站访问日志文件路径
        error_log /path/nginx/error.log;  # 当前网站错误日志文件路径
        charset utf-8;  # 字符集
        error_page 404 http://path/nginx/html/error_page.com;  # 错误页

        location / {  # 网站路由(访问路径，可正则)
            root /site/root;  # 站点所在根目录，即index中文件所在目录
            index index.html index.htm;  # 默认访问的页面

            allow 192.1698.10.1/255 192.168.245.0/255;  # 允许访问的IP范围
            deny all;  # 禁止访问的IP范围
            
        }

        location /proxy {
            proxy_pass http://sites;  # 反向代理：转发请求到服务集群sites
            proxy_http_version 1.1;  # 连接的协议版本

            # 解决跨域配置(跨域访问头)
            proxy_set_Header Access-Control-Allow-Origin "*" always;  # 设置允许跨域请求的源地址，always：设定每次响应都携带头字段信息
            proxy_set_Header Access-Control-Allow-Header "";  # 跨域请求允许携带的特殊头信息字段
            proxy_set_Header Access-Control-Allow-Methods "GET, POST, PUT, OPTIONS";  # 允许跨域请求的方法
            proxy_set_Header Access-Control-Allow-Credentials true;  # 是否允许跨域请求使用cookies

            proxy_next_upstream error timeout http_500;
            proxy_connect_timeout 60s;  # 后端服务器连接超时时间
            proxy_read_timeout 60s;  # 等候后端服务器响应时间
            proxy_send_timeout 60s;  # 后端服务器数据回传时间

            proxy_buffering on;
            proxy_buffers_size 4k;
            proxy_buffers 8 8k;
        }

        # 缓存配置
        proxy_cache_path /path/to/cache levels=1:2 keys_zone=my_cache:10m;  # 指定缓存路径和内存区域名称
        location /cache {
            proxy_pass http://127.0.0.1:8080;
            expires 10;  # 浏览器缓存过期时间
            proxy_cache my_cache； # 启用指定的缓存区域
            proxy_cache_vakild 200 300 1h;  # 指定状态码300和200的缓存有效期
            add_header Cache-Control "";  # 添加响应头信息(缓存控制头)


        }

        # 压缩配置
        gzip on;  # 开启GZIP压缩
        gzip_types text/plain text/css application/json;  # 指定需要压缩的文件类型

        location /auth {  # 基本认证配置
            auth_basic "提示信息";  # 认证提示信息
            auth_basic_user_file /path/auth/password;  # 认证密码文件路径
            root /path/nginx/root;
            index home.html;
        }
    }

    server {
        # 静态资源服务器
        listen 1001;  # 静态文件服务端口号
        server_name static.resources.com;  # 静态服务域名或IP
        root /root/static/root;  # 静态资源根目录

        location /statics {  # 静态文件服务
            proxy_pass http://statics;  # 反向代理到静态资源服务集群
            try_file $uri $uri/ =404;  # 将请求重写为不同的文件名
            rewrite  ;  # 根据正则重写url
        }

        
        location /scheduler {  # 配置定时任务
            internal;
            access_log off;
            proxy_pass http://localhost:1234/scheduler_script;  # 定时任务脚本
        }
        location / {
            
        }
        location / {
            
        }
        location / {
         ...   
        }
    }

    server {
        
        listen 80;  # 监听HTTP
        server_name ssl-redirect;
        return 301 https://$host$request_uri;  # HTTP重定向到https
        
        location / {
            
        }
        location / {
            
        }
        location / {
            
        }
        location / {
         ...   
        }
    }

    server {
        # HTTPS服务
        listen 443 ssl; # 端口号443配合使用以启用ssl
        server_name example_site.com;

        # SSL相关配置：需安装ssl模块
        ssl on;  # 开启ssl
        ssl_certificate /path/ssl-certficate.crt;  # ssl证书文件路径
        ssl_certificate_key /path/ssl-cerficate-private.key;  # ssl证书私钥文件路径
        ssl_protocols  ;  # 指定允许使用的ssl协议版本
        ssl_ciphers HIOH:!aNUKK:!MD5;  # 指定允许使用的加密算法
        ssl_session_cache shared:SSL:1m;  # ssl会话缓存
        ssl_session_timeout 2m;  # ssl会话超时时间
        
        location /https_site {
            root /path/aaa;
            index index.html
        }
    }

}

}